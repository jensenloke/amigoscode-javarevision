//primitives data types
        byte theByte = -1;
        int theInt = 32_000;
        double theDouble = 1.03;
        long theLong = 78_783_833_432L; //underscores does not do anything to output.

        float pi = 3.14F;
        double doublePi = 3.1415; //store 15 digits

        boolean isAdult = true;

        char nameInitial = 'J'; //single not double quotes

        System.out.println(theByte);
        System.out.println(theInt);
        System.out.println(pi);
        System.out.println(isAdult);
        System.out.println(theLong);
        System.out.println(nameInitial);

        String brand = "Jensenjava";
        Date date = new Date();
        var x = 1;
        var y = 6;
        var c = x + y;
        //this prints to your console
        /*
        None of the code in between will be executed.
        */
        System.out.println(c);

        //Reference Types always start with capital, gives u build in behaviours and you can build your own.
        String name = new String("Jensen Code");
        int age = 20;
        char d = 'A'; //takes a single character only, must use String Data Type
        System.out.println(name.toUpperCase(Locale.ROOT));
        LocalDate now = LocalDate.now();
        System.out.println(now.getMonth());

        //difference between primitives and reference types
            int a =  10;
            int b = a;
            a = 100;
        System.out.println("a = " + a + " - b = " + b);

        Person alex = new Person("alex");
        Person mariam = alex;

        System.out.println("before changing alex");

        System.out.println(alex.name + " " + mariam.name);

        alex.name = "alexander";

        System.out.println("after changing alex");
        System.out.println(alex.name + " " + mariam.name);

        //variablenames
        int zero = 0; //name variables with context, and never start with uppercase
        //for variables with more than one word, use camel casing
        int subscriberCountSuccess = 1_000_000; //camel_case

        //stringclass
        char z = 'Z'; //one character only
        String bike = new String("Yamaha"); //multiple characters
        //String is a class, bike is an object of type String
        //objects have behaviours associated with clas
        System.out.println(bike.toUpperCase());
        //toUpperCase() is a method, explores different method
        System.out.println(bike.charAt(1));
        System.out.println(bike.contains("maha"));
        System.out.println(name.equals(bike));
        //stopped at 1hr22mins
    }
    //classes start with caps case, objects can use methods associated with the class that can be invoked
    static class Person{
        String name;

        Person(String name){
            this.name = name;
        };

//importing packages

        Date date = new Date();
        LocalDate localDate = LocalDate.now();
        LocalDateTime localDateTime = LocalDateTime.now();
        String s = new String(); //anything that comes from java.lang has no import statements

//reserved keywords
//arithmetic ops
        int ten = 10;
        int two = 2;
        int sum = ten + two;
        System.out.println(sum);
        System.out.println(10 - 2 * 3); //BODMAS applies
        System.out.println(10 * 2);
        System.out.println(10 % 3);
//Math class
    //performs extra operations on numbers, coming from java.lang, no import required
    system.out.println(Math.abs(-10));
            double maxMath = Math.max(3.6,10.11);
            System.out.println(maxMath);
            System.out.println((int) Math.pow(5,2)); //(int) changes output from 25.0 to 25, this is casting
//Comparison Operators
        int khalidAge = 18;
        int mariamAge = 20;
        boolean isKhalidOlderThanMariam = khalidAge > mariamAge;
        System.out.println(isKhalidOlderThanMariam);
        System.out.println( khalidAge != mariamAge);
        //!= is boolean operators
//Logical and comparison Operators
        boolean isAdult = true;
        boolean isStudent = false;
        boolean isAmigosCodeMember = true;
        String name = "Mark";
        //&& is 'and' means all statements must be true
        //|| is 'or' and only one needs to be true
        //use ! in front of condition boolean to switch, can be used in sout
        System.out.println((isAdult || !isStudent) && isAmigosCodeMember && name.contains("ark") );
//If statements
        int age = 17;
        if (age > 18){
            System.out.println("hooray im an adult");
        } else if (age >= 16 && age < 18) {
            System.out.println("almost there!");
        } else {
            System.out.println("too young..");
        }
//Ternary operators
        int age = 17;
        //for boolean expressions with only 1 boolean value;
        String message = age >= 18 ?
                "Hooray.. I am not an adult":
                "I am not an adult";
        System.out.println(message);
//switch statement
        String gender = "FEMALE";
        //used only to perform if condition only on one value.
        switch (gender){
            case "FEMALE":
                System.out.println("I am female");
                break; //'break' only required in java 11, in java 12 not required anymore
            case "MALE":
                System.out.println("I am male");
                break;
            case "PREFER_NOT_SAY":
                System.out.println("I prefer not to say");
                break;
        }
//Arrays
        int zero = 0;
        int one = 1;

        boolean [] booleans = new boolean[3];

        //Arrays starts from 0 as index
        int [] numbers = new int[3]; //size cannot be modified.
        numbers[0] = 0;
        numbers[1] = 1;
        numbers[2] = 2;
        //numbers[3] = 3 //will not work
        System.out.println(Arrays.toString(numbers));

        //another way of creating arrays
        int [] numbers2 = {2,0,1,104}; //elastic way of creating arrays
        System.out.println(Arrays.toString(numbers2));
        System.out.println(numbers2.length);

        //creating arrays with strings
        String [] names = {"Mariam","Ali", "Jeremy","Alan","Benny"};
        System.out.println(Arrays.toString(names));
        System.out.println(names.length);

 //Arrays with Indexes
        int [] numbers = {2,0,1,100,4,90,78}; //elastic way of creating arrays
        int oneHundred = numbers[3];
        int last = numbers[numbers.length-1];
        System.out.println(last);

//Loops
        int [] numbers = {2,0,1,100,4,90,78,89,213};

        int number = 0;
        number++; //increment by 1; equivalent to number = number + 1; only a short hand for unit 1 increment.
        number--; //decrement by 1
        number += 5; //unit increment
        number -= 5; //unit increment
        System.out.println(number);

 //Enhanced For Loops
        int [] numbers = {2,0,1,100,4,90,78,89,213};
        String [] names = {"Ali", "Anna", "Alvin"};
        //enhanced for loop, does not have access to the index.
        for (int number : numbers) {
            System.out.println(number);
        }

        for (String name : names){
            System.out.println(name);
        }
/*
        for (int i = 0; i < numbers.length; i++){
            System.out.println(numbers[i]);
        }
*/

//Bonus Tip
use intelliJ = numbers.for ... or names.for...
Arrays.stream(numbers).forEach(System.out::println); //functional programming

    //Break and Continue
        String [] names = {"Anna", "Ali", "Bob", "Mike"};
        for (String name: names){
//            if (name.equals("Bob")){
//              break; //Once it hits Bob it exits.
//            }
            if (name.startsWith("A")){
                continue; // exits loop and goes back to array, does not go to print, hence only bob and mike printed.
            }
            System.out.println(name);
        }

    //While Loop
        int i = 1;
        while(i <= 10) {
            System.out.println("hi");
            i++;
        }

    //Do While Loop
        int i = 21;
        do{
            System.out.println("hi");
            i++;
        } //executes at least once. differs from previous loop is that do while executes no matter what at least once.
        while(i <= 20);

//Scanner
        Scanner scanner = new Scanner(System.in);
        //scanner can take user input from console.
        System.out.println("What is your name?");

        String userName = scanner.nextLine();
        System.out.println("Hello... "+userName);

        System.out.println("How old are you?");
        int age = scanner.nextInt();
        int year = LocalDate.now().minusYears(age).getYear();
        System.out.println("You were born in "+year);

        if(age<18){
            System.out.println("and you are still young");
        } else {
            System.out.println("and you are an adult!");
        }

//methods
        String brand = "Samsung";
        System.out.println(brand.toUpperCase());
        boolean startsWithS = brand.startsWith("S");
        boolean endsWithS = brand.endsWith("S");
        System.out.println(startsWithS);
        System.out.println(endsWithS);

        char [] letters = {'A','B','B','C','C','D','D','D','D',};
        int count = countOccurrences(letters, 'B');
        System.out.println(count);
    }

    //method that returns count of letters
    public static int countOccurrences(char [] letters, char searchLetter){
        //accepts an array of letters, and a search character
        int count = 0;
        //loops through character
        for (char letter : letters){
            //checks if letter is in search letter
            if (letter == searchLetter){
                //increments count if letter is found
                count++;
            }
        }
        return count;

//classes and Objects
                //creating 2 lenses, which is 2 objects.
                Lens lensOne = new Lens("olympus", "85mm",true);
                Lens lensTwo = new Lens("canon","92mm", true);

                System.out.println("Lens 1" + ", " + lensOne.isPrime + ", " + lensOne.brand + ", " + lensOne.focalLength);
                System.out.println("Lens 2" + ", " + lensTwo.isPrime + ", " + lensTwo.brand + ", " + lensTwo.focalLength);
                }

            static class Lens {
                //static is used so that we can use this inside public static void main.
                String brand;
                String focalLength;
                boolean isPrime;

                Lens(String brand,
                     String focalLength,
                     boolean isPrime){
                    this.brand = brand;
                    this.focalLength = focalLength;
                    this.isPrime = isPrime;
                    //this refers to the current instance of the current class
                }
